"""
Django settings for the project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys

from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv

# Path configurations
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_DIR = BASE_DIR.parent

# Load environment variables
load_dotenv(ROOT_DIR / '.env.local')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

DEBUG = True  # Set to False for production

ALLOWED_HOSTS = []  # Should be populated with your domain names in production

ROOT_URLCONF = 'config.urls'  # URL configuration file

# CORS settings
ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL = True

# Apps settings
BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'rest_framework_simplejwt.token_blacklist',
    'channels',
    'django_extensions',
]

LOCAL_APPS = [
    'authentication',
    'base',
    'patients',
    'doctors',
    'administrators',
    'tracking',
    'clinical_history',
    'medical_specialties',
    'addresses',
    'groups',
]

INSTALLED_APPS = BASE_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# Middleware settings
BASE_MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

THIRD_PARTY_MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
]

LOCAL_MIDDLEWARE = []

MIDDLEWARE = BASE_MIDDLEWARE + THIRD_PARTY_MIDDLEWARE + LOCAL_MIDDLEWARE

# WSGI and ASGI application settings
WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'

# Channels settings for real-time features
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [(os.getenv('REDIS_HOST'), os.getenv('REDIS_PORT'))],
        },
    }
}

# Database settings
if 'test' in sys.argv or os.getenv('USE_SQLITE_IN_CI') == 'true':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv('DATABASE_NAME'),
            'USER': os.getenv('DATABASE_USER'),
            'PASSWORD': os.getenv('DATABASE_PASSWORD'),
            'HOST': os.getenv('DATABASE_HOST'),
            'PORT': os.getenv('DATABASE_PORT'),
        },
    }

# Custom user model
AUTH_USER_MODEL = 'base.User'

# Defined roles
ROLES = {role.upper(): role for role in os.getenv('VITE_ROLES').split(',')}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=45),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=3),
    'ROTATE_REFRESH_TOKENS': True,
    'TOKEN_BLACKLIST_ENABLED': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# Static files directories
STATIC_URL = 'static/'

# Template settings
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Fixture directories
FIXTURE_DIRS = [os.path.join(BASE_DIR, 'fixture')]

# Sending emails settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# Reset password email settings
RESET_PASSWORD_CLIENT_URL = os.getenv('RESET_PASSWORD_CLIENT_URL')

# Tracking settings
WEB_SOCKET_TRACKING_PATH = os.getenv('VITE_WEB_SOCKET_TRACKING_PATH')

# Pagination settings
PAGINATION_PARAMETER = os.getenv('VITE_PAGINATION_PARAMETER')
PAGINATION_PAGE_SIZE_PARAMETER = os.getenv('VITE_PAGINATION_PAGE_SIZE_PARAMETER')
DEFAULT_PAGINATION_SIZE = os.getenv('VITE_DEFAULT_PAGINATION_SIZE')
PAGINATION_OPTIONAL_PARAMETER = os.getenv('VITE_PAGINATION_OPTIONAL_PARAMETER')

# Search settings
SEARCH_PARAMETER = os.getenv('VITE_SEARCH_PARAMETER')

# Brand settings
BRAND_NAME = os.getenv('VITE_BRAND_NAME')

# Internationalization settings
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
