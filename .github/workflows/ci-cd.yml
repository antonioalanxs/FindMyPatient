name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  # backend-ci:
  #   name: Backend CI
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       python-version: [3.10.x]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Load .env.local file into GitHub Actions environment
  #       run: grep -v '^#' ./.env.local | xargs >> $GITHUB_ENV

  #     - name: Set SQLite fallback
  #       run: echo "USE_SQLITE_IN_CI=True" >> $GITHUB_ENV

  #     - name: Reduce execution times in the Appointment Scheduling Algorithm tests
  #       run: echo "FAST_APPOINTMENT_TESTS=True" >> $GITHUB_ENV

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #       working-directory: backend

  #     - name: Apply database migrations
  #       run: |
  #         python manage.py makemigrations
  #         python manage.py migrate
  #       working-directory: backend

  #     - name: Run backend tests
  #       run: python manage.py test
  #       working-directory: backend

  # frontend-ci:
  #   name: Frontend CI
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '22.7.0'

  #     - name: Clean node_modules folder and package-lock.json file
  #       run: |
  #         rm -rf frontend/node_modules
  #         rm -f frontend/package-lock.json

  #     - name: Install dependencies
  #       run: npm install --legacy-peer-deps
  #       working-directory: frontend

  #     - name: Run frontend tests
  #       run: npm run test
  #       working-directory: frontend

  build-and-push-images-to-docker-hub:
    name: Build and Push Docker Images to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Get .env file from secrets
        run: echo "${{ secrets.ENVIRONMENT_FILE }}" > .env

      - name: Grant permissions to script
        run: chmod +x docker/build_and_push_image.sh

      - name: Run script
        run: |
          docker/build_and_push_image.sh backend.dockerfile ${{ secrets.DOCKER_HUB_USERNAME }}/findmypatient-backend:latest ${{ secrets.DOCKER_HUB_USERNAME }} ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker/build_and_push_image.sh frontend.dockerfile ${{ secrets.DOCKER_HUB_USERNAME }}/findmypatient-frontend:latest ${{ secrets.DOCKER_HUB_USERNAME }} ${{ secrets.DOCKER_HUB_PASSWORD }}
        working-directory: docker
